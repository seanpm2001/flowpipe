name: "01 - Flowpipe: Release"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Select Release Type'
        options:
        # to change the values in this option, we also need to update the condition test below in at least 3 location. Search for github.event.inputs.environment
        - Development (beta)
        - Final (RC and final release)
        required: true
      version:
        description: "Version (without 'v')"
        required: true
        default: 0.6.\invalid
      confirmDevelop:
        description: Confirm running on develop branch
        required: true
        type: boolean

env:
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  create_test_build:
    name: Create test build
    runs-on: ubuntu-latest
    steps:
      - name: validate
        if: github.ref == 'refs/heads/main'
        env:
          CONFIRM_MAIN: ${{ github.event.inputs.confirmMain }}
        run: |
          if [ "$CONFIRM_MAIN" == 'false' ]; then
            echo "It looks like you've accidentally tried to run this action in main branch. Either: "
            echo " - Re-run the action and select the branch you wanted, or"
            echo " - If you really do want to run this for main, then re-run and tick the box to confirm"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: flowpipe
          ref: ${{ github.event.ref }}

      - name: Checkout Pipe Fittings Components repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.PIPE_FITTINGS_DEPLOY_PRIVATE_KEY }}
          repository: turbot/pipe-fittings
          path: pipe-fittings
          ref: v1.0.x

      - name: Checkout Flowpipe SDK Go repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.FLOWPIPE_GO_SDK_DEPLOY_PRIVATE_KEY }}
          repository: turbot/flowpipe-sdk-go
          path: flowpipe-sdk-go
          ref: main

      # this is required, check golangci-lint-action docs
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false # setup-go v4 caches by default, do not change this parameter, check golangci-lint-action doc: https://github.com/golangci/golangci-lint-action/pull/704

      - name: Build UI
        run: make build-ui
        working-directory: flowpipe

      # The ui build often changes the yarn.lock file, this causes issue with GoReleaser that needs a clean git status
      # I'm hesitant to use the shortcut of --skip-validate or doing a localbuild (skip publish/snapshot) and uploading the
      # binary ourselves. The other alternative is to commit the yarn.lock file post UI build which I'm not keen on either doing it
      # automatically.
      #
      # For now I'm going to remove the yarn.lock post UI build.
      - name: Clean UI artifacts
        working-directory: flowpipe
        run: |
          git status
          git restore ui/form/yarn.lock
          git status

      - name: Release dry-run to create binaries
        working-directory: flowpipe
        run: |-
          make release-dry-run

      - name: Check binaries
        working-directory: flowpipe
        run: |
          ls -al dist/
      
      - name: Move build artifacts
        run: |
          sudo chown -R runner:docker $GITHUB_WORKSPACE/flowpipe/dist
          mkdir ~/artifacts
          mv $GITHUB_WORKSPACE/flowpipe/dist/flowpipe.linux.amd64.tar.gz ~/artifacts/linux.tar.gz
          mv $GITHUB_WORKSPACE/flowpipe/dist/flowpipe.linux.arm64.tar.gz ~/artifacts/linux-arm.tar.gz
          mv $GITHUB_WORKSPACE/flowpipe/dist/flowpipe.darwin.amd64.tar.gz ~/artifacts/darwin.tar.gz
          mv $GITHUB_WORKSPACE/flowpipe/dist/flowpipe.darwin.arm64.tar.gz ~/artifacts/darwin-arm.tar.gz

      - name: List Build Artifacts
        run: ls -l ~/artifacts

      - name: Save Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-linux
          path: ~/artifacts/linux.tar.gz
          if-no-files-found: error

      - name: Save Linux ARM Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-linux-arm
          path: ~/artifacts/linux-arm.tar.gz
          if-no-files-found: error

      - name: Save MacOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-darwin
          path: ~/artifacts/darwin.tar.gz
          if-no-files-found: error

      - name: Save MacOS ARM Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-darwin-arm
          path: ~/artifacts/darwin-arm.tar.gz
          if-no-files-found: error

  smoke_test_ubuntu_24:
    name: Smoke test (Ubuntu 24, x86_64)
    runs-on: ubuntu-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-linux
          path: ./artifacts
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Pull Ubuntu latest Image
        run: docker pull ubuntu:latest
  
      - name: Create and Start Ubuntu latest Container
        run: |
          docker run -d --name ubuntu-24-test -v ${{ github.workspace }}/artifacts:/artifacts -v ${{ github.workspace }}/scripts:/scripts ubuntu:latest tail -f /dev/null

      - name: Get runner/container info
        run: |
          docker exec ubuntu-24-test /scripts/linux_container_info.sh
  
      - name: Install dependencies, create user, and assign necessary permissions
        run: |
          docker exec ubuntu-24-test /scripts/prepare_ubuntu_container.sh

      - name: Run smoke tests
        run: |
          docker exec ubuntu-24-test /scripts/smoke_test.sh
  
      - name: Stop and Remove Container
        run: |
          docker stop ubuntu-24-test
          docker rm ubuntu-24-test

  smoke_test_centos_9:
    name: Smoke test (Centos stream 9, x86_64)
    runs-on: ubuntu-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-linux
          path: ./artifacts
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Pull CentOS Stream 9 image
        run: docker pull quay.io/centos/centos:stream9
  
      - name: Create and Start CentOS stream9 Container
        run: |
          docker run -d --name centos-stream9-test -v ${{ github.workspace }}/artifacts:/artifacts -v ${{ github.workspace }}/scripts:/scripts quay.io/centos/centos:stream9 tail -f /dev/null

      - name: Get runner/container info
        run: |
          docker exec centos-stream9-test /scripts/linux_container_info.sh
  
      - name: Install dependencies, create user, and assign necessary permissions
        run: |
          docker exec centos-stream9-test /scripts/prepare_centos_container.sh
        
      - name: Run smoke tests
        run: |
          docker exec centos-stream9-test /scripts/smoke_test.sh
  
      - name: Stop and Remove Container
        run: |
          docker stop centos-stream9-test
          docker rm centos-stream9-test

  smoke_test_amazonlinux:
    name: Smoke test (Amazonlinux 2023, x86_64)
    runs-on: ubuntu-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-linux
          path: ./artifacts
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Pull Amazon Linux 2023 Image
        run: docker pull amazonlinux:2023
  
      - name: Create and Start Amazon Linux 2023 Container
        run: |
          docker run -d --name amazonlinux-2023-test -v ${{ github.workspace }}/artifacts:/artifacts -v ${{ github.workspace }}/scripts:/scripts amazonlinux:2023 tail -f /dev/null

      - name: Get runner/container info
        run: |
          docker exec amazonlinux-2023-test /scripts/linux_container_info.sh
  
      - name: Install dependencies, create user, and assign necessary permissions
        run: |
          docker exec amazonlinux-2023-test /scripts/prepare_amazonlinux_container.sh

      - name: Run smoke tests
        run: |
          docker exec amazonlinux-2023-test /scripts/smoke_test.sh
  
      - name: Stop and Remove Container
        run: |
          docker stop amazonlinux-2023-test
          docker rm amazonlinux-2023-test

  smoke_test_amazonlinux_2:
    name: Smoke test (Amazonlinux 2, x86_64)
    runs-on: ubuntu-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-linux
          path: ./artifacts
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Pull Amazon Linux 2 Image
        run: docker pull amazonlinux:2
  
      - name: Create and Start Amazon Linux 2 Container
        run: |
          docker run -d --name amazonlinux-2-test -v ${{ github.workspace }}/artifacts:/artifacts -v ${{ github.workspace }}/scripts:/scripts amazonlinux:2 tail -f /dev/null

      - name: Get runner/container info
        run: |
          docker exec amazonlinux-2-test /scripts/linux_container_info.sh
  
      - name: Install dependencies, create user, and assign necessary permissions
        run: |
          docker exec amazonlinux-2-test /scripts/prepare_amazonlinux_container.sh

      - name: Run smoke tests
        run: |
          docker exec amazonlinux-2-test /scripts/smoke_test.sh
  
      - name: Stop and Remove Container
        run: |
          docker stop amazonlinux-2-test
          docker rm amazonlinux-2-test

  smoke_test_ubuntu_24_arm64:
    name: Smoke test (Ubuntu 24, ARM64)
    runs-on: ubuntu-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-linux-arm
          path: ./artifacts
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
  
      - name: Create Buildx Builder
        run: |
          docker buildx create --use --name mybuilder
          docker buildx inspect --bootstrap
  
      - name: Pull Ubuntu 24 ARM64 Image
        run: docker pull arm64v8/ubuntu:latest
  
      - name: Create and Start Ubuntu 24 ARM64 Container
        run: |
          docker run -d --name ubuntu-24-arm64-test -v ${{ github.workspace }}/artifacts:/artifacts -v ${{ github.workspace }}/scripts:/scripts arm64v8/ubuntu:latest tail -f /dev/null

      - name: Get runner/container info
        run: |
          docker exec ubuntu-24-arm64-test /scripts/linux_container_info.sh

      - name: Install dependencies, create user, and assign necessary permissions
        run: |
          docker exec ubuntu-24-arm64-test /scripts/prepare_ubuntu_container.sh

      - name: Run smoke tests
        run: |
          docker exec ubuntu-24-arm64-test /scripts/smoke_test.sh
  
      - name: Stop and Remove Container
        run: |
          docker stop ubuntu-24-arm64-test
          docker rm ubuntu-24-arm64-test

  smoke_test_darwin_arm:
    name: Smoke test (MacOS 14, ARM64)
    runs-on: macos-latest
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Darwin Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-darwin-arm
          path: ~/artifacts

      - name: Extract Darwin Artifacts and Install Binary
        run: |
          tar -xf ~/artifacts/darwin-arm.tar.gz -C /usr/local/bin/

      - name: Get runner/container info
        run: |
          uname -a
          sw_vers

      - name: Run Smoke tests
        run: |
          ls -al $GITHUB_WORKSPACE/scripts
          chmod +x $GITHUB_WORKSPACE/scripts/smoke_test.sh
          $GITHUB_WORKSPACE/scripts/smoke_test.sh

  smoke_test_darwin_amd:
    name: Smoke test (MacOS 13, x86_64)
    runs-on: macos-13
    needs: [create_test_build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Darwin Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-darwin
          path: ~/artifacts

      - name: Extract Darwin Artifacts and Install Binary
        run: |
          tar -xf ~/artifacts/darwin.tar.gz -C /usr/local/bin/

      - name: Get runner/container info
        run: |
          uname -a
          sw_vers

      - name: Run Smoke tests
        run: |
          ls -al $GITHUB_WORKSPACE/scripts
          chmod +x $GITHUB_WORKSPACE/scripts/smoke_test.sh
          $GITHUB_WORKSPACE/scripts/smoke_test.sh

  # ensure_branch_in_homebrew:
  #   name: Ensure branch exists in homebrew-tap
  #   needs: [create_test_build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Calculate version
  #       id: calculate_version
  #       run: |
  #         echo "VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV

  #     - name: Parse semver string
  #       id: semver_parser
  #       uses: booxmedialtd/ws-action-parse-semver@v1
  #       with:
  #         input_string: ${{ github.event.inputs.version }}

  #     - name: Checkout
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       uses: actions/checkout@v4
  #       with:
  #         repository: turbot/homebrew-tap
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         ref: main

  #     - name: Delete base branch if exists
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         git fetch --all
  #         git push origin --delete flowpipe-brew
  #         git push origin --delete $VERSION
  #       continue-on-error: true

  #     - name: Create base branch
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         git checkout -b flowpipe-brew
  #         git push --set-upstream origin flowpipe-brew

  build_and_release:
    name: Build and Release Flowpipe
    needs: [ensure_branch_in_homebrew]
    runs-on: ubuntu-latest
    steps:
      - name: validate
        if: github.ref == 'refs/heads/develop'
        env:
          CONFIRM_MAIN: ${{ github.event.inputs.confirmDevelop }}
        run: |
          if [ "$CONFIRM_MAIN" == 'false' ]; then
            echo "It looks like you've accidentally tried to run this action in develop branch. Either: "
            echo " - Re-run the action and select the branch you wanted, or"
            echo " - If you really do want to run this for develop, then re-run and tick the box to confirm"
            exit 1
          fi

  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         path: flowpipe
  #         ref: ${{ github.event.ref }}

      - name: Checkout Pipe Fittings Components repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.PIPE_FITTINGS_DEPLOY_PRIVATE_KEY }}
          repository: turbot/pipe-fittings
          path: pipe-fittings
          ref: v1.4.x

  #     - name: Checkout Flowpipe SDK Go repository
  #       uses: actions/checkout@v4
  #       with:
  #         ssh-key: ${{ secrets.FLOWPIPE_GO_SDK_DEPLOY_PRIVATE_KEY }}
  #         repository: turbot/flowpipe-sdk-go
  #         path: flowpipe-sdk-go
  #         ref: main

  #     # - name: Unshallow
  #     #   run: git fetch --prune --unshallow

  #     - name: Calculate version
  #       id: calculate_version
  #       run: |
  #         if [ "${{ github.event.inputs.environment }}" = "Development (beta)" ]; then
  #           echo "VERSION=v${{ github.event.inputs.version }}-beta.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
  #         else
  #           echo "VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
  #         fi

  #     - name: Tag Release
  #       run: |
  #         cd flowpipe
  #         git config user.name "Flowpipe GitHub Actions Bot"
  #         git config user.email noreply@github.com
  #         git tag $VERSION
  #         git push origin $VERSION

  #     # this is required, check golangci-lint-action docs
  #     - uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.21'
  #         cache: false # setup-go v4 caches by default, do not change this parameter, check golangci-lint-action doc: https://github.com/golangci/golangci-lint-action/pull/704

  #     - name: Setup release environment
  #       run: |-
  #         cd flowpipe
  #         echo 'GITHUB_TOKEN=${{secrets.GH_ACCESS_TOKEN}}' > .release-env

  #     - name: Build UI
  #       run: make build-ui
  #       working-directory: flowpipe

  #     # The ui build often changes the yarn.lock file, this causes issue with GoReleaser that needs a clean git status
  #     # I'm hesitant to use the shortcut of --skip-validate or doing a localbuild (skip publish/snapshot) and uploading the
  #     # binary ourselves. The other alternative is to commit the yarn.lock file post UI build which I'm not keen on either doing it
  #     # automatically.
  #     #
  #     # For now I'm going to remove the yarn.lock post UI build.
  #     - name: Clean UI artifacts
  #       working-directory: flowpipe
  #       run: |
  #         git status
  #         git restore ui/form/yarn.lock
  #         git status

  #     - name: Release publish
  #       run: |-
  #         cd flowpipe
  #         make release

  # create_pr_in_homebrew:
  #   name: Create PR in homebrew-tap
  #   if: ${{ github.event.inputs.environment == 'Final (RC and final release)' }}
  #   needs: [build_and_release]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Calculate version
  #       id: calculate_version
  #       run: |
  #         echo "VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV

  #     - name: Parse semver string
  #       id: semver_parser
  #       uses: booxmedialtd/ws-action-parse-semver@v1
  #       with:
  #         input_string: ${{ github.event.inputs.version }}

  #     - name: Checkout
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       uses: actions/checkout@v4
  #       with:
  #         repository: turbot/homebrew-tap
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         ref: main

  #     - name: Create a new branch off the base branch
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         git fetch --all
  #         git checkout flowpipe-brew
  #         git checkout -b $VERSION
  #         git push --set-upstream origin $VERSION

  #     - name: Close pull request if already exists
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         gh pr close $VERSION
  #       continue-on-error: true

  #     - name: Create pull request
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         gh pr create --base main --head $VERSION --title "$VERSION" --body "Update formula"

  # update_pr_for_versioning:
  #   name: Update PR
  #   if: ${{ github.event.inputs.environment == 'Final (RC and final release)' }}
  #   needs: [create_pr_in_homebrew]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Calculate version
  #       id: calculate_version
  #       run: |
  #         echo "VERSION=v${{ github.event.inputs.version }}" >> $GITHUB_ENV

  #     - name: Parse semver string
  #       id: semver_parser
  #       uses: booxmedialtd/ws-action-parse-semver@v1
  #       with:
  #         input_string: ${{ github.event.inputs.version }}

  #     - name: Checkout
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       uses: actions/checkout@v4
  #       with:
  #         repository: turbot/homebrew-tap
  #         token: ${{ secrets.GH_ACCESS_TOKEN }}
  #         ref: v${{ github.event.inputs.version }}

  #     - name: Update live version
  #       if: steps.semver_parser.outputs.prerelease == ''
  #       run: |
  #         scripts/formula_versioning_flowpipe.sh
  #         git config user.name "Flowpipe GitHub Actions Bot"
  #         git config user.email noreply@github.com
  #         git add .
  #         git commit -m "Versioning brew formulas"
  #         git push origin $VERSION
