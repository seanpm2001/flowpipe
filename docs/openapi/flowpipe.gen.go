// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ListPipelinesResponse defines model for ListPipelinesResponse.
type ListPipelinesResponse struct {
	Items     *[]Pipeline `json:"items,omitempty"`
	NextToken *string     `json:"next_token,omitempty"`
}

// Pipeline defines model for Pipeline.
type Pipeline struct {
	Id       *int64  `json:"id,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PipelineListParams defines parameters for PipelineList.
type PipelineListParams struct {
	// Limit The max number of items to fetch per page of data, subject to a min and max of 1 and 100 respectively. If not specified will default to 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// NextToken When list results are truncated, next_token will be returned, which is a cursor to fetch the next page of data. Pass next_token to the subsequent list request to fetch the next page of data.
	NextToken *string `form:"next_token,omitempty" json:"next_token,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Pipelines
	// (GET /pipeline)
	PipelineList(c *gin.Context, params PipelineListParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PipelineList operation middleware
func (siw *ServerInterfaceWrapper) PipelineList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PipelineListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "next_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "next_token", c.Request.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter next_token: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PipelineList(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/pipeline", wrapper.PipelineList)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVTY/bNhD9KwTboyp5k90edOoCaQojAWJ0i/ZQLApaGkmT8muHQ3904f9ekJIte71p",
	"2kt9MCRx5vHx6c3Ts2yc8c6C5SDrZxmaAYzKlx8x8Ao9aLQQfobgnQ2QFjw5D8QIuQwZzOXFtwSdrOU3",
	"1QxdTbjVEVAeCsl7D7KWikjt072FHf/B7k+wCWVaDUxoe3mY6936MzScGk5g16Ta9A87ZbwGWd8s0q+Q",
	"nSOjWNYSLX9/K0+QaBl6oIQZA5BVBi76ZQdDH/dzwxdZFXJndOodMaQ/nTfVBmgiIe8fkhoj03uPH2B/",
	"H3nIvK2s5QCqBZLFESMtOsK/FKOzMweVO0dg2HGird+5JqO2EBpCnxtq+R5tK1xkYRyBUOt0+V67bSIn",
	"CxlJp12ZfV1V3fS8RJfkQNu5BNg4y6rhrIpRqLNonfvhRfnlvr8MGASG017ifrWUhdTYwGSl4wl/Wn3c",
	"vL2gEuqq2m63ZW9j6aivpqZQqd7r796WixJsObDR2UlAJnzqHoA22MCrh6lyTZXkQ87v9EyBDVAYKS/K",
	"m3KRIJ0HqzzKWqa9EjeveMjiVv7Mdz3wteBpdMRpdmRGo/z6lq2sT75NZRmYlAEGCrL+/flKQxBG7YSN",
	"Zg0kXCfynAl2ogNuBuGBhFc9pKVWsSpEiNmLqUQJg1Yo22YM14mbfHOzWAiC4KFh3IDel2LZCetYpEfY",
	"IbRii1qLFjoVdUZ6c1fKYvTnUwTaz/bUaDAdYxzxUYzcJus3d4U0aocmmjyEhTRop7vr4TsULw//2wBW",
	"6CQmQYiag1AEginaRjG0hZgjYyS8BkHAkWxa3A7YDMl/SjSRgqNZNB4g914oV4qVCuEck12uDHEd4CmC",
	"5SOZpwiBvwb3Bb3OYu5ctJfJ8lhImkI3u+7NYnEcRLDZc8p7jU22VfU5ODvn99dS+PVoz0ly+QI+fUiz",
	"cDtufbm0tBulsRXLdyLExATasfb2unYFnO3VuWinqrvrql8TXj6OgF0D4+Mcm9EYRfvXBotVn6Zm/hQ8",
	"TkFLm+M8XWbKeSQoj9VmIZPUE85LSj9ugPY8oO2n2Dzt858y9x9CtmpdE+ZEOZxscval/NesxAMr/h+5",
	"TfsdHg9/BwAA///FrU4OSAgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
